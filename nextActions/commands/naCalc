#!/usr/bin/python
from __future__ import division
from na_lib_sorting import get_sorted_actions
from na_lib_sorting import TIMESTAMP_FORMAT
import argparse
import time
import datetime


def setup_argument_list():
    "creates and parses the argument list for naCount"
    parser = argparse.ArgumentParser(
        description="prints out the number of nextactions of each age in the current nextActions file")
    parser.add_argument('-c', nargs="?",
                        help="if context_filter is activated then only actions in the relevant contexts (contexts are generally in 'bgthop0ry') are counted")
    parser.add_argument( '-a', action='store_true', help="Gives all numbers")
    parser.add_argument( '-m', action='store_true', help="Gives the average as well")
    parser.add_argument(
        '-n', nargs="?", help="reverse context filter, eliminates certain contexts from the count")
    return parser.parse_args()


def filter_and_print_actions(args):
    "fetches the actions and runs a filter on them depending on the arguments"
    tasks = get_sorted_actions()
    if args.c:
        tasks = [i for i in tasks if i[1] in args.c]
    if args.n:
        tasks = [i for i in tasks if i[1] not in args.n]

    count_items= get_action_age_info_with_priority(tasks, lambda x:1, False)
    pri_items= get_action_age_info_with_priority(tasks)
    if args.m:
        print " %d, %s,  %d, %d, %d, %d" % pri_items, " with average priority of :%.2f"% (7.00-(pri_items[0]/count_items[0]))
        return
    if args.a:
        print " %d, %s,  %d, %d, %d, %d" % pri_items, ", %d, %d, %d, %d" % count_items
    else: 
        print " %d, %s,  %d, %d, %d, %d" % pri_items


def print_count_with_args():
    "prints out the number of nextactions of each age in the current nextActions file"
    args = setup_argument_list()
    filter_and_print_actions(args)


seconds_in_day=60*60*24

def get_action_age_info_with_priority(tasklist, scorer=lambda x:7-int(x[0]), time_print=True):
    "prints out the number of nextactions of each age in a current nextactions"
    now, dayold, threedayold, weekold = (0, 0, 0, 0)
    for row in tasklist:
        datestring = row[5]
        timestamp_on_action = time.strptime(
            datestring.strip(), TIMESTAMP_FORMAT)
        age = time.time() - time.mktime(timestamp_on_action)
	now += scorer(row)
        if age > seconds_in_day:
            dayold += scorer(row)
            if age > seconds_in_day * 3:
                threedayold += scorer(row)
                if age > seconds_in_day * 7:
                    weekold += scorer(row)
    if time_print==True:
	return (now, datetime.date.today(), time.time(), weekold, dayold, threedayold)

    return (now, weekold, dayold, threedayold)




if __name__ == '__main__':
    print_count_with_args()
